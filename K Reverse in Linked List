Question____________________________________

You are Partially return linked class
You are required to complete body of krelese function. the function expected to tweak the list such that all group og k elements in the list reversed and linked,
if the last set is less than k elemnt, leave it as it is (Don't reverse)

input  -- 1 2 3 4 5 6 7 8 9 10 11 
output -- 3 2 1 6 5 4 9 8 7 10 11 

Solution___________________________________
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    static class Node{
        int data;
        Node next;
    }
    
    static class LinkedList{
        Node head;
        Node tail;
        int size;
        
        void add(int val){
            Node temp = new Node();
            temp.data = val;
            temp.next = null;
            
            if(size == 0){
                head = tail = temp;
                size++;
            }else{
               tail.next = temp;
               tail = temp;
               size++;
            }
        }
        
        void display(){
            Node temp = head;
            
            while(temp != null){
                System.out.print(temp.data + " ");
                temp = temp.next;
            }
            System.out.println();
        }
        
        void addFirst(int val){
            Node temp = new Node();
            temp.data = val;
            
            if(size == 0){
                temp.next = null;
                tail = head = temp;
                size++;
            }else{
                temp.next = head;
                head = temp;
                size++;
            }
        }
        
        Node getFirst(){
            Node thead = head;
            if(head.next != null){
              head = head.next;
            }
            size--;
            return thead;
        }
        
        void kReverse(int k) {
            LinkedList pre = new LinkedList();
            
            Node temp = head;
            int counter = 0;
            
            while(this.size >= k) {
                LinkedList curr = new LinkedList();
                
               for(int i =0; i<k; i++) {
                   Node val = getFirst();
                   curr.addFirst(val.data);
               }
               if(pre.size == 0){
                   pre.head = curr.head;
                   pre.tail = curr.tail;
                   pre.size = curr.size;
               }else{
                   pre.tail.next = curr.head;
                   pre.tail = curr.tail;
                   pre.size = pre.size + curr.size;
               }
            }
           
          while(this.size > 0){
              Node val = getFirst();
              pre.add(val.data);
          }
           
          this.head = pre.head;
          this.tail = pre.tail;
          this.size = pre.size;
        }
    }
    
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        
        int k = 3;
        LinkedList list = new LinkedList();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.add(6);
        list.add(7);
        list.add(8);
        list.add(9);
        list.add(10);
        list.add(11);
        
        list.display();
        list.kReverse(k);
        
        list.display();
    }
}
