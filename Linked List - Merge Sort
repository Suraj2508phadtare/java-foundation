Question_____________________________________________________________________

solve Proble using merge sort --- divide - conquer - merge
input ----- 4 2 1 5 3 8 7 6 
output ---- 1 2 3 4 5 6 7 8 

Solution_________________________________________________________________

class Main {

    public static class Node{
        int data;
        Node next;
    }
    
    public static class LinkedList{
        int size;
        Node head;
        Node tail;
        
        void add(int val) {
            Node temp = new Node();
            temp.data = val;
            temp.next = null;
            
            if(size == 0){
                head = tail = temp;
                size++;
            }else{
                tail.next = temp;
                tail = temp;
                size++;
            }
        }
        
        void size(){
            System.out.println(size);
        }
        
        void display(){
            Node temp = head;
            
            for(int i=0; i<size; i++)
            {
                System.out.print(temp.data + " ");
                temp = temp.next;
            }
            
            System.out.println();
        }
        
        
    }
    
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        
        LinkedList list1 = new LinkedList();
        
        list1.add(4);
        list1.add(2);
        list1.add(1);
        list1.add(5);
        list1.add(3);
        list1.add(8);
        list1.add(7);
        list1.add(6);
        
        
        list1.display();
       
       LinkedList ansList = mergeSort(list1.head, list1.tail);
        
       ansList.display();
        
    }
    
    static LinkedList mergeTwoLinked(LinkedList list1, LinkedList list2){
        Node temp1 = list1.head;
        Node temp2 = list2.head;
        
        LinkedList rv = new LinkedList();
        
        while(temp1 != null && temp2 != null){
            if(temp1.data <= temp2.data){
                rv.add(temp1.data);
                temp1 = temp1.next;
            }else{
                rv.add(temp2.data);
                temp2 = temp2.next;
            }
        }
        
        while(temp1 != null){
            rv.add(temp1.data);
            temp1 = temp1.next; 
        }
        
        while(temp2 != null){
             rv.add(temp2.data);
            temp2 = temp2.next;
        }
        
        return rv;
    }
    
    static Node mid(Node head, Node tail){
        Node s = head;
        Node f = head;
        
        while(f != tail && f.next != tail){
            s = s.next;
            f = f.next.next;
        }
        return s;
    }
    
    static LinkedList mergeSort(Node head, Node tail){
        if(head == tail){
            LinkedList br = new LinkedList();
            br.add(head.data);
            return br;
        } 
        Node mid = mid(head, tail);
        LinkedList flh = mergeSort(head, mid);
        LinkedList slh = mergeSort(mid.next, tail);
        LinkedList cl = mergeTwoLinked(flh, slh);
        
        return cl;
    }
    
}

