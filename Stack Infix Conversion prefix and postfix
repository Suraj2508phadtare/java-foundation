Quetion____________________
conversion to prefix and postfix

You are give infix expression
You are required to convert postfix and print it
You are required to convert prefix and print it

Constraints___
The Expression is Balanced
the only erpression used are +,-,*,/
opening and closing brackets () are used to impact precedence of opeation
in two operators of equal precedence give prefereance to the one on left
All operands are single digit numbers

input 
a *(b-c)/d+e
output
prefix ----> +/*a-bcde
postfix ----> abc-*d/e+

Solution________________________

import java.util.*;

public class MyClass {
  public static void main(String args[]) {
   
   Scanner scn = new Scanner(System.in);
   String exp = scn.nextLine();
   
   Stack<Character> operators = new Stack<>();
   Stack<String> postSt = new Stack<>();
   Stack<String> preSt = new Stack<>();
   
   for(int i=0; i<exp.length(); i++){
       char ch = exp.charAt(i);
       
       if(ch == '('){
           operators.push('(');
       }else if((ch >= 0 && ch<=9) || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')){
           postSt.push(ch +"");
           preSt.push(ch +"");
       }else if(ch == ')'){
           while(operators.peek() != '('){
               // prefix
               String v2 = preSt.pop();
               String v1 = preSt.pop();
                char chh = operators.pop();
               
               String preVal = chh+v1+v2;
               preSt.push(preVal);
               
               // postfix
                v2 = postSt.pop();
                v1 = postSt.pop();

               
               String postVal =v1+v2+chh;
               postSt.push(postVal);
           }
           
           operators.pop();
       }else if(ch == '+' || ch == '-' || ch == '*' || ch == '/'){
       
       while(operators.size()>0 && operators.peek() != '(' && precedence(operators.peek())>=precedence(ch)){
            // prefix
               String v2 = preSt.pop();
               String v1 = preSt.pop();
                char chh = operators.pop();
               
               String preVal = chh+v1+v2;
               preSt.push(preVal);
               
               // postfix
                v2 = postSt.pop();
                v1 = postSt.pop();

               
               String postVal = v1+v2+chh;
               postSt.push(postVal);
               
              
       }
        operators.push(ch);
       }
   }
   
   while(operators.size()>0){
        // prefix
               String v2 = preSt.pop();
               String v1 = preSt.pop();
                char chh = operators.pop();
               
               String preVal = chh+v1+v2;
               preSt.push(preVal);
               
               // postfix
                v2 = postSt.pop();
                v1 = postSt.pop();

               
               String postVal = v1+v2+chh;
               postSt.push(postVal);
   }
   
   System.out.println("Prefix");
   System.out.println(preSt.peek());
   
   System.out.println("Postfix");
   System.out.println(postSt.peek());
   
  }
  
  public static int precedence(char ch){
      if(ch == '+' || ch == '-'){
          return 1;
      }else if(ch == '*' || ch == '/'){
          return 2;
      } else{
          return 0;
      }
  }
  
}
