Quetion______________________________

You are given pair of space separated numbers
the pair of nubber repreting start time and end Time of meeting,(First Number is Start Time and second Number End Time)
You are required to merge meetings and print merged meeting output in increasing order of start time.

Example___________
input ----->   int[][] arr = {{22,28},{1,8},{25,27},{14,19},{27,30},{5,12}};
22,28,
1,8,
25,27,
14,19,
27,30,
5,12
Output ----->
1 12
14 19
22 30


Solution______________________________________________________

// merge overlapping

import java.util.*;
class Main {
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
    
        int[][] arr = {{22,28},{1,8},{25,27},{14,19},{27,30},{5,12}};
        Pair[] pair = new Pair[arr.length];
        
        for(int i=0; i<arr.length; i++){
            pair[i] = new Pair(arr[i][0], arr[i][1]);
        }
        
        Arrays.sort(pair);
        Stack<Pair> st = new Stack<>();
        
        for(int i=0; i<pair.length; i++){
            if(st.size() == 0){
                st.push(pair[i]);
            }else{
                Pair top = st.peek();
                
                if(pair[i].st > top.et){
                    st.push(pair[i]);
                }else{
                    top.et = Math.max(top.et, pair[i].et);
                }
            }
        }
        
        Stack<Pair> rv = new Stack<>();
        
        while(st.size() !=0){
            rv.push(st.pop());
        }
        
        while(rv.size() != 0){
            Pair top = rv.pop();
            
            System.out.println(top.st + " " + top.et);
        }
        
    }
    
    public static class Pair implements Comparable<Pair>{
        int st;
        int et;
        
        Pair(int st, int et) {
            this.st = st;
            this.et = et;
        }
        public int compareTo(Pair other){
            // this st > other st ----> +ve
            // this == this ------> zero
            // this < other -------> -ve
            if(this.st != other.st){
                return this.st - other.st;
            }else{
                return this.et - this.et;
            }
         
        }
    }
}
